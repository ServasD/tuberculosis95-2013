# -*- coding: utf-8 -*-
"""CasoPracticoPython_Tubercolosis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gV70UUMOykaRBK6AvUwWO0g4NKvxJxPZ

# Analisis de Tuberculosis
"""

from google.colab import drive
import pandas as pd
import numpy as np

drive. mount('/content/drive')

pd.set_option("display.max_columns", None)
pd.set_option("display.max_rows", None)

"""**Planteamiento**

Usted trabaja para la Organización Mundial de la Salud como analista de información. El consejo directivo se reunirá para revisar los datos más recientes de casos de tuberculosis.
Los datos han llegado con la información más reciente y necesita prepararlos para mostrar la información a los líderes de la organización.
El objetivo de la junta es entender la situación actual de tuberculosis, y las tendencias por región e identifi car países que han sido casos de éxito y aquellos que necesiten mayor apoyo con la gestión de la enfermedad.
Tenga en mente las metas de la ONU para terminar con la Tuberculosis para 2025:
● Reducción en la tasa de incidencia del 50% 2015 vs 2025.
● Reducción en 75% el número de muertes 2015 vs 2025
"""

who = pd.read_csv("/content/drive/MyDrive/Colab/who.csv")
population = pd.read_csv("/content/drive/MyDrive/Colab/population.csv")

population. head()
who.head()

"""#Manipulacion de datos

Un conjunto de datos del Informe Global sobre Tuberculosis de la Organización Mundial de la Salud (OMS), junto con datos de poblaciones globales.
El conjunto utiliza los códigos originales de la OMS.

Los nombres de las columnas de la columna 5 a la 60 se forman combinando *new_* con:
*   El método de diagnóstico (*rel* = recaída, *sn* = esputo pulmonar negativo, *sp* = esputo pulmonar positivo, *ep* = extrapulmonar).

*   El género (*f* = femenino, *m* = masculino).


*   El grupo de edad (*014* = 0 a 14 años, *1524* = 15 a 24, *2534* = 25 a 34, *3544* = 35 a 44, *4554* = 45 a 54, *5564* = 55 a 64, *65* = 65 años o más).

"""

who.columns

population.columns

"""**Valores nulos**"""

who.isna().sum()

# filtrar valores faltantes
who[who.iso2.isna()]

# Los valores faltantes de iso2 para Namibia se llenan con un string NA
who.loc[who.country == "Namibia", "iso2"] = "NA"

# todos los valores faltantes van a ser rellenados con valor 0
who = who.fillna(0)

population = pd.read_csv("/content/drive/MyDrive/Colab/population.csv")
population.head()
who.head()

who2 = who.melt(id_vars=["country", "year", "iso2", "iso3"])

# Add gender, agegroup, and method columns to who2 before merging
who2["gender"] = np.where(who2["variable"].str.contains("m"), "masculino", "femenino")
who2["agegroup"] = who2["variable"].apply(asignar_groupedad)
who2["method"] = who2["variable"].apply(asignar_metodo)
who2 = who2.rename(columns={"value": "cases"})


who2.head()

# Añadir la columna que indique el genero
who2["gender"] = np.where(who2["variable"].str.contains("m"), "masculino", "femenino")
who2.head(10)

# vamos a realizar un join con population
df = pd.merge(left=who2, right=population, how="inner", on=["country", "year"])

df.head()

# funcion para asignar el grupo de edad
def asignar_groupedad(valor):
  if "014" in valor:
     return "0-14"
  elif "1524" in valor:
    return "15-24"
  elif "25-34" in valor:
    return "25-34"
  elif "3544" in valor:
    return "35-44"
  elif "4554" in valor:
    return "45-54"
  elif "5564" in valor:
    return "55-64"
  elif "65" in valor:
    return "65+"

# asignar grupo de edad
who2["agegroup"] = who2["variable"].apply(asignar_groupedad)
who2.head()

# funcion para asignar los metodos de diagnóstico
def asignar_metodo(valor):
  if "rel" in valor:
    return "recaida"
  if "sn" in valor:
    return "esputo pulmonar negativo"
  if "sp" in valor:
    return "esputo pulmonar positivo"
  if "ep" in valor:
    return "extrapulmonar"

who2["method"] = who2["variable"].apply(asignar_metodo)
who2.head()

who2 = who2.drop(columns=["variable"])

who2.head()

who2 = who2.rename(columns={"value": "cases"})
who2.head()

df.to_csv("tuberculosis.csv", index=False)

"""# Analisis exploratorio

"""

# la cantidad de Paises y el rango de años
print(f"Año de inicio: {df['year'].min()}")
print(f"Año de finalizacion: {df['year'].max()}")
print(f"Cantidad de paises: {df['country'].nunique()}")

by_method = df.groupby("method", as_index=False)["cases"].sum()
by_method

by_method["percent_of_total"] = 100 * by_method["cases"] / by_method["cases"].sum()
by_method

by_gender = df.groupby("gender", as_index=False)["cases"].sum()
by_gender["percent_of_total"] = 100 * by_gender["cases"] / by_gender["cases"].sum()
by_gender

by_agegroup = df.groupby("agegroup", as_index=False)["cases"].sum()
by_agegroup["percent_of_total"] = 100 * by_agegroup["cases"] / by_agegroup["cases"].sum()
by_agegroup

by_country = df.groupby("country", as_index=False)["cases"].sum()
by_country["percent_of_total"] = 100 * by_country["cases"] / by_country["cases"].sum()
by_country.sort_values(by="cases", ascending=False).head(10)

df.head()

"""**Tasa de incidencia**

POr cada 100, 000 habitantes

i= 100000* cases / poblacion_total
"""

# by_country_year
by_country_year = df.groupby(["country", "year"], as_index=False).agg(
    {"cases": "sum", "population": "max"}
)

by_country_year["incidencia"] = 100_000 * by_country_year["cases"] / by_country_year["population"]
top_5_incidencia = top_1_incidencia.sort_values("incidencia", ascending=False).head(5)
top_5_incidencia

# by_year
by_year = by_country_year.groupby("year", as_index=False).agg(
    {"cases": "sum", "population": "sum"}
)

by_year["incidencia"] = 100_000 * by_year["cases"] / by_year["population"]

by_year

"""**Visualizacion de datos con Seaborn, Matplotlib y Plotly**"""

import matplotlib.pyplot as plt  # base de visualizaciond e Python
import seaborn  as sns  # Ofrece visualizaciones más avanzadas
import plotly.express as px  # ofrece visualizaciones interactivas

# ejemplo de matplotlib
plt.plot([1,2,3], [4,5,6,])
plt. title ("Ejemplo de Matplotlib")
plt.xlabel("Eje X")
plt.ylabel("Eje Y")
plt.show()

# Ejemplo de Seaborn
# Seaborn esta construido por encima de Matplotlib
plt.figure(figsize=(10,6))
ax = sns. barplot(data=by_year, x="year", y="incidencia")
ax.set_title("Tasa de Incidencia")
ax.set_xlabel("Año")
ax.set_ylabel("Tasa de Incidencia")
plt.savefig("/content/drive/MyDrive/Colab/incidencia.png")
plt.show()

# plotly express
fig = px.bar(by_year, x="year", y="incidencia")
fig.show()

"""# De 1995 al 2003"""

by_year_before_2003 = by_year[by_year["year"] < 2003]
by_year_before_2003

# Calculado automaticamente
# Porcentaje de diferencia from 1995-2002
percent_change = 100 * (by_year_before_2002["incidencia"].iloc[-1] - by_year_before_2013["incidencia"].iloc[0]) / by_year_before_2002["incidencia"].iloc[0]
print(f"Cambio de porcentaje de incidencia de 1995 al 2002: {percent_change:.0f}%")

"""# Del 2003 al  2013"""

by_year_2003_2013 = by_year[(by_year["year"] >= 2003) & (by_year["year"] <= 2013)]
by_year_2003_2013

# Porcentaje de diferencia from 2003-2013
inicio = by_year[by_year["year"] == 2003].iloc[0]
fin = by_year[by_year["year"] == 2013].iloc[0]

percent_change = 100 * (fin["incidencia"] - inicio["incidencia"]) / inicio["incidencia"]

print(f"Cambio de porcentaje de incidencia de 2003 a 2013: {percent_change:.0f}%")